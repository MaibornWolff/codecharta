// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SettingsMerger AttributeTypes merge should merge attributeTypes if one file does not contain attributeTypes 1`] = `
Object {
  "edges": Array [
    Object {
      "attribute2": "relative",
    },
  ],
  "nodes": Array [
    Object {
      "attribute1": "absolute",
    },
  ],
}
`;

exports[`SettingsMerger AttributeTypes merge should merge different attributeTypes 1`] = `
Object {
  "edges": Array [
    Object {
      "attribute2": "relative",
    },
    Object {
      "attribute4": "relative",
    },
  ],
  "nodes": Array [
    Object {
      "attribute1": "absolute",
    },
    Object {
      "attribute3": "absolute",
    },
  ],
}
`;

exports[`SettingsMerger AttributeTypes merge should only contain unique attributeType keys 1`] = `
Object {
  "edges": Array [
    Object {
      "attribute2": "relative",
    },
  ],
  "nodes": Array [
    Object {
      "attribute1": "absolute",
    },
  ],
}
`;

exports[`SettingsMerger Blacklist merge should merge blacklist for different paths 1`] = `
Array [
  Object {
    "path": "/root/nodeA",
    "type": "exclude",
  },
  Object {
    "path": "/another/nodeB",
    "type": "flatten",
  },
  Object {
    "path": "/another/nodeC",
    "type": "exclude",
  },
  Object {
    "path": "*prefix/nodeD",
    "type": "flatten",
  },
]
`;

exports[`SettingsMerger Blacklist merge should only contain unique paths+type 1`] = `
Array [
  Object {
    "path": "/root/nodeA",
    "type": "exclude",
  },
  Object {
    "path": "/another/nodeB",
    "type": "flatten",
  },
  Object {
    "path": "*prefix/nodeD",
    "type": "flatten",
  },
]
`;

exports[`SettingsMerger Edges merge should merge all edges if one file does not contain edges 1`] = `
Array [
  Object {
    "attributes": Object {
      "attribute1": 10,
      "attribute2": 20,
    },
    "fromNodeName": "/root/nodeA",
    "toNodeName": "/root/nodeB",
    "visible": undefined,
  },
  Object {
    "attributes": Object {
      "attribute1": 10,
      "attribute2": 20,
    },
    "fromNodeName": "/root/nodeA",
    "toNodeName": "/root/nodeC",
    "visible": undefined,
  },
]
`;

exports[`SettingsMerger Edges merge should merge different edges 1`] = `
Array [
  Object {
    "attributes": Object {
      "attribute1": 10,
      "attribute2": 20,
    },
    "fromNodeName": "/root/nodeA",
    "toNodeName": "/root/nodeB",
    "visible": undefined,
  },
  Object {
    "attributes": Object {
      "attribute1": 10,
      "attribute2": 20,
    },
    "fromNodeName": "/root/nodeA",
    "toNodeName": "/root/nodeC",
    "visible": undefined,
  },
]
`;

exports[`SettingsMerger Edges merge should merge edge-attributes for the same edge paths 1`] = `
Array [
  Object {
    "attributes": Object {
      "attribute1": 10,
      "attribute2": 20,
      "attribute3": 30,
      "attribute4": 40,
    },
    "fromNodeName": "/root/nodeA",
    "toNodeName": "/root/nodeB",
    "visible": undefined,
  },
]
`;

exports[`SettingsMerger Edges merge should overwrite duplicated edge-attributes for the same edge 1`] = `
Array [
  Object {
    "attributes": Object {
      "attribute1": 70,
      "attribute2": 80,
    },
    "fromNodeName": "/root/nodeA",
    "toNodeName": "/root/nodeB",
    "visible": undefined,
  },
]
`;

exports[`SettingsMerger MarkedPackages merge should merge all markedPackages if one file does not contain markedPackages 1`] = `
Array [
  Object {
    "attributes": Object {
      "name": "nodeA",
    },
    "color": "#ABABAB",
    "path": "/root/nodeA",
  },
  Object {
    "attributes": Object {
      "name": "nodeB",
    },
    "color": "#FFFFFF",
    "path": "/root/nodeB",
  },
]
`;

exports[`SettingsMerger MarkedPackages merge should merge different markedPackages 1`] = `
Array [
  Object {
    "attributes": Object {
      "name": "nodeA",
    },
    "color": "#ABABAB",
    "path": "/root/nodeA",
  },
  Object {
    "attributes": Object {
      "name": "nodeB",
    },
    "color": "#FFFFFF",
    "path": "/root/nodeB",
  },
]
`;

exports[`SettingsMerger MarkedPackages merge should merge markedPackage-attributes for the same markedPackage paths 1`] = `
Array [
  Object {
    "attributes": Object {
      "another": "nodeA",
      "name": "nodeA",
    },
    "color": "#ABABAB",
    "path": "/root/nodeA",
  },
]
`;

exports[`SettingsMerger MarkedPackages merge should overwrite duplicated markedPackage-attributes for the same markedPackage 1`] = `
Array [
  Object {
    "attributes": Object {
      "name": "overwrite nodeA",
    },
    "color": "#ABABAB",
    "path": "/root/nodeA",
  },
]
`;
