apply plugin: 'application'

mainClassName = 'de.maibornwolff.codecharta.tools.ccsh.Ccsh'
applicationName = 'ccsh'

// On JDK 9+ some illegal reflection warnings are caused by cglib (a dependency of sonar-java)
// In order to avoid this, the JVM_OPTS need to be adjusted to suppress the warning
def UNIX_JVM_ARGS_SWITCH = '''#!/usr/bin/env sh
DEFAULT_JVM_OPTS=''
if [ java ]; then
    version=$(java -version 2>&1 | awk -F '"' '/version/ {print $2}')
    version1=$(echo "$version" | awk -F. '{printf("%03d%03d",$1,$2);}')
    if [ $version1 -ge 001009 ]; then
        DEFAULT_JVM_OPTS='"--add-opens=java.base/java.lang=ALL-UNNAMED"'
    fi
fi
'''

dependencies {
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: kotlin_version
    implementation project(path: ':model')

    def codeMaatImporter = project(':import:CodeMaatImporter')
    def csvImporter = project(':import:CSVImporter')
    def structureModifier = project(':filter:StructureModifier')
    def svnlogParser = project(':import:SVNLogParser')
    def gitlogParser = project(':import:GitLogParser')
    def sonarImporter = project(':import:SonarImporter')
    def sourceCodeParser = project(':import:SourceCodeParser')
    def tokeiImporter = project(':import:TokeiImporter')
    def mergeFilter = project(':filter:MergeFilter')
    def edgeFilter = project(':filter:EdgeFilter')
    def validationTool = project(':tools:ValidationTool')
    def csvExporter = project(':export:CSVExporter')
    def rawTextParser = project(':parser:RawTextParser')
    def interactiveParser = project(':tools:InteractiveParser')
    def pipeableParser = project(':tools:PipeableParser')
    def metricGardenerImporter = project(':import:MetricGardenerImporter')

    // first implementation is for dependency in main, testImplementation is so our test suite can find all other tests
    implementation codeMaatImporter; testImplementation codeMaatImporter.sourceSets.test.output
    implementation csvImporter; testImplementation csvImporter.sourceSets.test.output
    implementation svnlogParser; testImplementation svnlogParser.sourceSets.test.output
    implementation gitlogParser; testImplementation gitlogParser.sourceSets.test.output
    implementation sonarImporter; testImplementation sonarImporter.sourceSets.test.output
    implementation sourceCodeParser; testImplementation sourceCodeParser.sourceSets.test.output
    implementation tokeiImporter; testImplementation tokeiImporter.sourceSets.test.output
    implementation mergeFilter; testImplementation mergeFilter.sourceSets.test.output
    implementation edgeFilter; testImplementation edgeFilter.sourceSets.test.output
    implementation validationTool; testImplementation validationTool.sourceSets.test.output
    implementation csvExporter; testImplementation csvExporter.sourceSets.test.output
    implementation structureModifier; testImplementation structureModifier.sourceSets.test.output
    implementation rawTextParser; testImplementation rawTextParser.sourceSets.test.output
    implementation interactiveParser; testImplementation interactiveParser.sourceSets.test.output
    implementation pipeableParser; testImplementation pipeableParser.sourceSets.test.output
    implementation metricGardenerImporter; testImplementation metricGardenerImporter.sourceSets.test.output

    implementation group: 'info.picocli', name: 'picocli', version: picocli_version
    implementation group: 'io.github.microutils', name: 'kotlin-logging', version: kotlin_logging_version
    implementation "com.github.kotlin-inquirer:kotlin-inquirer:$kotlin_inquirer_version"

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: junit5_version
    testImplementation group: 'org.assertj', name: 'assertj-core', version: assertj_version
    testImplementation group: 'io.mockk', name: 'mockk', version: mockk_version

    testImplementation("org.junit.platform:junit-platform-runner:$junit_platform_version")
}

jar {
    archiveBaseName = "${applicationName}"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes 'Main-Class': mainClassName,
            'Implementation-Title': 'CodeCharta ccsh',
            'Implementation-Version': archiveVersion
    }
    zip64 true
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
}

startScripts{
    doLast {
        windowsScript.text = windowsScript.text.replaceAll('set CLASSPATH=.*', 'set CLASSPATH=.;%APP_HOME%/lib/*')

        unixScript.text = unixScript.text.replaceAll('DEFAULT_JVM_OPTS=.*', '')
        unixScript.text = unixScript.text.replaceAll('#!/usr/bin/env sh', '')
        unixScript.text = UNIX_JVM_ARGS_SWITCH + unixScript.text
    }
}

test {
    useJUnitPlatform()
}
