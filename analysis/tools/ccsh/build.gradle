apply plugin: 'application'

mainClassName = 'de.maibornwolff.codecharta.tools.ccsh.Ccsh'
applicationName = 'ccsh'

// On JDK 9+ some illegal reflection warnings are caused by cglib (a dependency of sonar-java)
// In order to avoid this, the JVM_OPTS need to be adjusted to suppress the warning
def UNIX_JVM_ARGS_SWITCH = '''#!/usr/bin/env sh
DEFAULT_JVM_OPTS=''
if [[ java ]]; then
    version=$(java -version 2>&1 | awk -F '"' '/version/ {print $2}') 
    if [[ "$version" > "1.9" ]]; then
        DEFAULT_JVM_OPTS='"--add-opens=java.base/java.lang=ALL-UNNAMED"'
    fi
fi'''

dependencies {
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: kotlin_version

    def codeMaatImporter = project(':import:CodeMaatImporter')
    def crococosmoImporter = project(':import:CrococosmoImporter')
    def csvImporter = project(':import:CSVImporter')
    def jasomeImporter = project(':import:JasomeImporter')
    def structureModifier = project(':filter:StructureModifier')
    def scmlogParser = project(':import:SCMLogParser')
    def sonarImporter = project(':import:SonarImporter')
    def sourceCodeParser = project(':import:SourceCodeParser')
    def understandImporter = project(':import:UnderstandImporter')
    def mergeFilter = project(':filter:MergeFilter')
    def edgeFilter = project(':filter:EdgeFilter')
    def validationTool = project(':tools:ValidationTool')
    def csvExporter = project(':export:CSVExporter')

    // first compile is for dependency in main, testCompile is so our test suite can find all other tests
    compile codeMaatImporter; testCompile codeMaatImporter.sourceSets.test.output
    compile crococosmoImporter; testCompile crococosmoImporter.sourceSets.test.output
    compile csvImporter; testCompile csvImporter.sourceSets.test.output
    compile jasomeImporter; testCompile jasomeImporter.sourceSets.test.output
    compile scmlogParser; testCompile scmlogParser.sourceSets.test.output
    compile sonarImporter; testCompile sonarImporter.sourceSets.test.output
    compile sourceCodeParser; testCompile sourceCodeParser.sourceSets.test.output
    compile understandImporter; testCompile understandImporter.sourceSets.test.output
    compile mergeFilter; testCompile mergeFilter.sourceSets.test.output
    compile edgeFilter; testCompile edgeFilter.sourceSets.test.output
    compile validationTool; testCompile validationTool.sourceSets.test.output
    compile csvExporter; testCompile csvExporter.sourceSets.test.output
    compile structureModifier; testCompile structureModifier.sourceSets.test.output

    compile group: 'info.picocli', name: 'picocli', version: picocli_version

    testCompile("org.junit.platform:junit-platform-runner:$junit_platform_version")
}

jar {
    baseName = "${applicationName}"
    manifest {
        attributes 'Main-Class': mainClassName,
                'Implementation-Title': 'CodeCharta ccsh',
                'Implementation-Version': version
    }

    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

startScripts{
    doLast {
        windowsScript.text = windowsScript.text.replaceAll('set CLASSPATH=.*', 'set CLASSPATH=.;%APP_HOME%/lib/*')

        unixScript.text = unixScript.text.replaceAll('DEFAULT_JVM_OPTS=.*', '')
        unixScript.text = unixScript.text.replaceAll('#!/usr/bin/env sh', '')
        unixScript.text = UNIX_JVM_ARGS_SWITCH + unixScript.text
    }
}