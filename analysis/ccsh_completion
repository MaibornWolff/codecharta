#!/usr/bin/env bash
#
# ccsh Bash Completion
# =======================
#
# Bash completion support for the `ccsh` command,
# generated by [picocli](http://picocli.info/) version 4.5.1.
#
# Installation
# ------------
#
# 1. Source all completion scripts in your .bash_profile
#
#   cd $YOUR_APP_HOME/bin
#   for f in $(find . -name "*_completion"); do line=". $(pwd)/$f"; grep "$line" ~/.bash_profile || echo "$line" >> ~/.bash_profile; done
#
# 2. Open a new bash console, and type `ccsh [TAB][TAB]`
#
# 1a. Alternatively, if you have [bash-completion](https://github.com/scop/bash-completion) installed:
#     Place this file in a `bash-completion.d` folder:
#
#   * /etc/bash-completion.d
#   * /usr/local/etc/bash-completion.d
#   * ~/bash-completion.d
#
# Documentation
# -------------
# The script is called by bash whenever [TAB] or [TAB][TAB] is pressed after
# 'ccsh (..)'. By reading entered command line parameters,
# it determines possible bash completions and writes them to the COMPREPLY variable.
# Bash then completes the user input if only one entry is listed in the variable or
# shows the options if more than one is listed in COMPREPLY.
#
# References
# ----------
# [1] http://stackoverflow.com/a/12495480/1440785
# [2] http://tiswww.case.edu/php/chet/bash/FAQ
# [3] https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html
# [4] http://zsh.sourceforge.net/Doc/Release/Options.html#index-COMPLETE_005fALIASES
# [5] https://stackoverflow.com/questions/17042057/bash-check-element-in-array-for-elements-in-another-array/17042655#17042655
# [6] https://www.gnu.org/software/bash/manual/html_node/Programmable-Completion.html#Programmable-Completion
# [7] https://stackoverflow.com/questions/3249432/can-a-bash-tab-completion-script-be-used-in-zsh/27853970#27853970
#

if [ -n "$BASH_VERSION" ]; then
  # Enable programmable completion facilities when using bash (see [3])
  shopt -s progcomp
elif [ -n "$ZSH_VERSION" ]; then
  # Make alias a distinct command for completion purposes when using zsh (see [4])
  setopt COMPLETE_ALIASES
  alias compopt=complete

  # Enable bash completion in zsh (see [7])
  autoload -U +X compinit && compinit
  autoload -U +X bashcompinit && bashcompinit
fi

# CompWordsContainsArray takes an array and then checks
# if all elements of this array are in the global COMP_WORDS array.
#
# Returns zero (no error) if all elements of the array are in the COMP_WORDS array,
# otherwise returns 1 (error).
function CompWordsContainsArray() {
  declare -a localArray
  localArray=("$@")
  local findme
  for findme in "${localArray[@]}"; do
    if ElementNotInCompWords "$findme"; then return 1; fi
  done
  return 0
}
function ElementNotInCompWords() {
  local findme="$1"
  local element
  for element in "${COMP_WORDS[@]}"; do
    if [[ "$findme" = "$element" ]]; then return 1; fi
  done
  return 0
}

# The `currentPositionalIndex` function calculates the index of the current positional parameter.
#
# currentPositionalIndex takes three parameters:
# the command name,
# a space-separated string with the names of options that take a parameter, and
# a space-separated string with the names of boolean options (that don't take any params).
# When done, this function echos the current positional index to std_out.
#
# Example usage:
# local currIndex=$(currentPositionalIndex "mysubcommand" "$ARG_OPTS" "$FLAG_OPTS")
function currentPositionalIndex() {
  local commandName="$1"
  local optionsWithArgs="$2"
  local booleanOptions="$3"
  local previousWord
  local result=0

  for i in $(seq $((COMP_CWORD - 1)) -1 0); do
    previousWord=${COMP_WORDS[i]}
    if [ "${previousWord}" = "$commandName" ]; then
      break
    fi
    if [[ "${optionsWithArgs}" =~ ${previousWord} ]]; then
      ((result-=2)) # Arg option and its value not counted as positional param
    elif [[ "${booleanOptions}" =~ ${previousWord} ]]; then
      ((result-=1)) # Flag option itself not counted as positional param
    fi
    ((result++))
  done
  echo "$result"
}

# Bash completion entry point function.
# _complete_ccsh finds which commands and subcommands have been specified
# on the command line and delegates to the appropriate function
# to generate possible options and subcommands for the last specified subcommand.
function _complete_ccsh() {
  local cmds0=(check)
  local cmds1=(merge)
  local cmds2=(edgefilter)
  local cmds3=(modify)
  local cmds4=(csvimport)
  local cmds5=(sonarimport)
  local cmds6=(sourcemonitorimport)
  local cmds7=(scmlogparser)
  local cmds8=(install)
  local cmds9=(csvexport)
  local cmds10=(crococosmoimport)
  local cmds11=(sourcecodeparser)
  local cmds12=(understandimport)
  local cmds13=(codemaatimport)
  local cmds14=(jasomeimport)
  local cmds15=(tokeiimporter)
  local cmds16=(rawtextparser)

  if CompWordsContainsArray "${cmds16[@]}"; then _picocli_ccsh_rawtextparser; return $?; fi
  if CompWordsContainsArray "${cmds15[@]}"; then _picocli_ccsh_tokeiimporter; return $?; fi
  if CompWordsContainsArray "${cmds14[@]}"; then _picocli_ccsh_jasomeimport; return $?; fi
  if CompWordsContainsArray "${cmds13[@]}"; then _picocli_ccsh_codemaatimport; return $?; fi
  if CompWordsContainsArray "${cmds12[@]}"; then _picocli_ccsh_understandimport; return $?; fi
  if CompWordsContainsArray "${cmds11[@]}"; then _picocli_ccsh_sourcecodeparser; return $?; fi
  if CompWordsContainsArray "${cmds10[@]}"; then _picocli_ccsh_crococosmoimport; return $?; fi
  if CompWordsContainsArray "${cmds9[@]}"; then _picocli_ccsh_csvexport; return $?; fi
  if CompWordsContainsArray "${cmds8[@]}"; then _picocli_ccsh_install; return $?; fi
  if CompWordsContainsArray "${cmds7[@]}"; then _picocli_ccsh_scmlogparser; return $?; fi
  if CompWordsContainsArray "${cmds6[@]}"; then _picocli_ccsh_sourcemonitorimport; return $?; fi
  if CompWordsContainsArray "${cmds5[@]}"; then _picocli_ccsh_sonarimport; return $?; fi
  if CompWordsContainsArray "${cmds4[@]}"; then _picocli_ccsh_csvimport; return $?; fi
  if CompWordsContainsArray "${cmds3[@]}"; then _picocli_ccsh_modify; return $?; fi
  if CompWordsContainsArray "${cmds2[@]}"; then _picocli_ccsh_edgefilter; return $?; fi
  if CompWordsContainsArray "${cmds1[@]}"; then _picocli_ccsh_merge; return $?; fi
  if CompWordsContainsArray "${cmds0[@]}"; then _picocli_ccsh_check; return $?; fi

  # No subcommands were specified; generate completions for the top-level command.
  _picocli_ccsh; return $?;
}

# Generates completions for the options and subcommands of the `ccsh` command.
function _picocli_ccsh() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="check merge edgefilter modify csvimport sonarimport sourcemonitorimport scmlogparser install csvexport crococosmoimport sourcecodeparser understandimport codemaatimport jasomeimport tokeiimporter rawtextparser"
  local flag_opts="-v --version -h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `check` subcommand.
function _picocli_ccsh_check() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `merge` subcommand.
function _picocli_ccsh_merge() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -a --add-missing --recursive --leaf -c --ignore-case"
  local arg_opts="-o --output-file"

  compopt +o default

  case ${prev_word} in
    -o|--output-file)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "merge" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 2147483647 )); then
      compopt -o filenames
      positionals=$( compgen -f -- "${curr_word}" ) # files
    fi
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `edgefilter` subcommand.
function _picocli_ccsh_edgefilter() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="--path-separator -o --output-file"

  compopt +o default

  case ${prev_word} in
    --path-separator)
      return
      ;;
    -o|--output-file)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `modify` subcommand.
function _picocli_ccsh_modify() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="-s --set-root -p --print-levels -o --output-file -f --move-from -r --remove -t --move-to"

  compopt +o default

  case ${prev_word} in
    -s|--set-root)
      return
      ;;
    -p|--print-levels)
      return
      ;;
    -o|--output-file)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -f|--move-from)
      return
      ;;
    -r|--remove)
      return
      ;;
    -t|--move-to)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "modify" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 0 )); then
      compopt -o filenames
      positionals=$( compgen -f -- "${curr_word}" ) # files
    fi
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `csvimport` subcommand.
function _picocli_ccsh_csvimport() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -c"
  local arg_opts="-d --delimeter --path-separator -o --output-file"

  compopt +o default

  case ${prev_word} in
    -d|--delimeter)
      return
      ;;
    --path-separator)
      return
      ;;
    -o|--output-file)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "csvimport" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 2147483647 )); then
      compopt -o filenames
      positionals=$( compgen -f -- "${curr_word}" ) # files
    fi
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `sonarimport` subcommand.
function _picocli_ccsh_sonarimport() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -c --merge-modules"
  local arg_opts="-o --output-file -m --metrics -u --user"

  compopt +o default

  case ${prev_word} in
    -o|--output-file)
      return
      ;;
    -m|--metrics)
      return
      ;;
    -u|--user)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `sourcemonitorimport` subcommand.
function _picocli_ccsh_sourcemonitorimport() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -c"
  local arg_opts="-o --output-file"

  compopt +o default

  case ${prev_word} in
    -o|--output-file)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "sourcemonitorimport" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 2147483647 )); then
      compopt -o filenames
      positionals=$( compgen -f -- "${curr_word}" ) # files
    fi
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `scmlogparser` subcommand.
function _picocli_ccsh_scmlogparser() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -c --silent --add-author"
  local arg_opts="-o --output-file --input-format"
  local inputFormatNames_option_args="GIT_LOG GIT_LOG_NUMSTAT GIT_LOG_NUMSTAT_RAW GIT_LOG_RAW SVN_LOG" # --input-format values

  compopt +o default

  case ${prev_word} in
    -o|--output-file)
      return
      ;;
    --input-format)
      COMPREPLY=( $( compgen -W "${inputFormatNames_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "scmlogparser" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 0 )); then
      compopt -o filenames
      positionals=$( compgen -f -- "${curr_word}" ) # files
    fi
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `install` subcommand.
function _picocli_ccsh_install() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts=""
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `csvexport` subcommand.
function _picocli_ccsh_csvexport() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help"
  local arg_opts="-o --output-file --depth-of-hierarchy"

  compopt +o default

  case ${prev_word} in
    -o|--output-file)
      return
      ;;
    --depth-of-hierarchy)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "csvexport" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 2147483647 )); then
      compopt -o filenames
      positionals=$( compgen -f -- "${curr_word}" ) # files
    fi
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `crococosmoimport` subcommand.
function _picocli_ccsh_crococosmoimport() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-c -h --help"
  local arg_opts="-o --output-file"

  compopt +o default

  case ${prev_word} in
    -o|--output-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "crococosmoimport" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 0 )); then
      compopt -o filenames
      positionals=$( compgen -f -- "${curr_word}" ) # files
    fi
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `sourcecodeparser` subcommand.
function _picocli_ccsh_sourcecodeparser() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -i --no-issues --default-excludes -c -v --verbose"
  local arg_opts="-e --exclude -f --format -o --output-file"
  local outputFormat_option_args="JSON TABLE" # --format values

  compopt +o default

  case ${prev_word} in
    -e|--exclude)
      return
      ;;
    -f|--format)
      COMPREPLY=( $( compgen -W "${outputFormat_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -o|--output-file)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "sourcecodeparser" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 0 )); then
      compopt -o filenames
      positionals=$( compgen -f -- "${curr_word}" ) # files
    fi
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `understandimport` subcommand.
function _picocli_ccsh_understandimport() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -c"
  local arg_opts="-o --output-file --path-separator"

  compopt +o default

  case ${prev_word} in
    -o|--output-file)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --path-separator)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "understandimport" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 2147483647 )); then
      compopt -o filenames
      positionals=$( compgen -f -- "${curr_word}" ) # files
    fi
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `codemaatimport` subcommand.
function _picocli_ccsh_codemaatimport() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -c"
  local arg_opts="-o --output-file"

  compopt +o default

  case ${prev_word} in
    -o|--output-file)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "codemaatimport" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 2147483647 )); then
      compopt -o filenames
      positionals=$( compgen -f -- "${curr_word}" ) # files
    fi
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `jasomeimport` subcommand.
function _picocli_ccsh_jasomeimport() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -c"
  local arg_opts="-o --output-file"

  compopt +o default

  case ${prev_word} in
    -o|--output-file)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "jasomeimport" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 0 )); then
      compopt -o filenames
      positionals=$( compgen -f -- "${curr_word}" ) # files
    fi
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `tokeiimporter` subcommand.
function _picocli_ccsh_tokeiimporter() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -c"
  local arg_opts="-r --root-name --path-separator -o --output-file"

  compopt +o default

  case ${prev_word} in
    -r|--root-name)
      return
      ;;
    --path-separator)
      return
      ;;
    -o|--output-file)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "tokeiimporter" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 0 )); then
      compopt -o filenames
      positionals=$( compgen -f -- "${curr_word}" ) # files
    fi
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rawtextparser` subcommand.
function _picocli_ccsh_rawtextparser() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -v --verbose -c --without-default-excludes"
  local arg_opts="-m --metrics -o --output-file --tab-width --max-indentation-level -e --exclude -f --file-extensions"

  compopt +o default

  case ${prev_word} in
    -m|--metrics)
      return
      ;;
    -o|--output-file)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --tab-width)
      return
      ;;
    --max-indentation-level)
      return
      ;;
    -e|--exclude)
      return
      ;;
    -f|--file-extensions)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "rawtextparser" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 0 )); then
      compopt -o filenames
      positionals=$( compgen -f -- "${curr_word}" ) # files
    fi
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Define a completion specification (a compspec) for the
# `ccsh`, `ccsh.sh`, and `ccsh.bash` commands.
# Uses the bash `complete` builtin (see [6]) to specify that shell function
# `_complete_ccsh` is responsible for generating possible completions for the
# current word on the command line.
# The `-o default` option means that if the function generated no matches, the
# default Bash completions and the Readline default filename completions are performed.
complete -F _complete_ccsh -o default ccsh ccsh.sh ccsh.bash
