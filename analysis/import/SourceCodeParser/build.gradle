plugins {
    id 'antlr'
    id 'net.ltgt.errorprone' version '0.0.16'
}

dependencies {
    implementation project(':model')

    antlr group: 'org.antlr', name:'antlr4', version: antlr_version
    errorprone group: 'com.google.errorprone', name:'error_prone_core', version: '2.3.2'

    implementation group: 'info.picocli', name: 'picocli', version: picocli_version
    implementation group: 'org.antlr', name:'antlr4-runtime', version: antlr_version

    testImplementation group: 'junit', name: 'junit', version: junit4_version
    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.10.0'
    testImplementation group: 'com.tngtech.archunit', name: 'archunit', version: '0.8.2'
    testImplementation project(path: ':model', configuration: 'testOutput')
}

tasks.withType(JavaCompile) {
    // errorprone should ignore generated code
    options.compilerArgs += ['-XepExcludedPaths:.*/src/generated/.*', '-Xep:DeadException:WARN' ]
}


generateGrammarSource {
    maxHeapSize = "64m"
    arguments += ['-package', 'de.maibornwolff.codecharta.importer.sourcecodeparser.oop.infrastructure.antlr.java']
    arguments += ['-visitor', '-long-messages']
    // NOTE: We NEED projectDir here, because the root project build.gradle will otherwise use the wrong relative folder
    outputDirectory = new File("${projectDir}/src/generated/antlr/de/maibornwolff/codecharta/importer/sourcecodeparser/oop/infrastructure/antlr/java").absoluteFile
}

compileJava.dependsOn generateGrammarSource

sourceSets {
    main {
        java.srcDirs = ['src/main/java', 'src/generated/antlr']
    }
}

compileJava.source sourceSets.main.java

clean{
    delete 'src/generated'
}