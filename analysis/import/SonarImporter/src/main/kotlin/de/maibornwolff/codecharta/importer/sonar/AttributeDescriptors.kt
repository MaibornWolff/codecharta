package de.maibornwolff.codecharta.importer.sonar

import de.maibornwolff.codecharta.model.AttributeDescriptor

fun getAttributeDescriptors(): Map<String, AttributeDescriptor> {
    val descriptors = mutableMapOf<String, AttributeDescriptor>()
    val metricLink = "https://docs.sonarcloud.io/digging-deeper/metric-definitions/"
    descriptors["blocker_violations"] = AttributeDescriptor(description = "Total count of issues of the severity blocker", link = metricLink)
    descriptors["branch_coverage"] = AttributeDescriptor(description = "Density of fully covered boolean conditions in flow control structures", link = metricLink)
    descriptors["bugs"] = AttributeDescriptor(description = "Number of bug issues", link = metricLink)
    descriptors["class_complexity"] = AttributeDescriptor(description = "Cyclomatic complexity based on paths through a class", link = metricLink)
    descriptors["classes"] = AttributeDescriptor(description = "Number of classes (including nested classes, interfaces, enums and annotations", link = metricLink)
    descriptors["code_smells"] = AttributeDescriptor(description = "Total count of code smell issues", link = metricLink)
    descriptors["cognitive_complexity"] = AttributeDescriptor(description = "How hard is it to understand the code's control flow", link = "https://www.sonarsource.com/resources/cognitive-complexity/")
    descriptors["comment_lines"] = AttributeDescriptor(description = "Number of lines containing either comment or commented-out code", link = metricLink)
    descriptors["comment_lines_density"] = AttributeDescriptor(description = "Density of comment lines in relation to total lines of code", link = metricLink)
    descriptors["complexity"] = AttributeDescriptor(description = "Cyclomatic complexity based on paths through the code", link = metricLink)
    descriptors["complexity_in_classes"] = AttributeDescriptor(description = "Cyclomatic complexity based on paths through a class", link = metricLink)
    descriptors["complexity_in_functions"] = AttributeDescriptor(description = "Cyclomatic complexity based on paths through a function", link = metricLink)
    descriptors["conditions_to_cover"] = AttributeDescriptor(description = "Number of conditions which could be covered by unit tests", link = metricLink)
    descriptors["confirmed_issues"] = AttributeDescriptor(description = "Total count of issues in the confirmed state", link = metricLink)
    descriptors["coverage"] = AttributeDescriptor(description = "Mix of branch and line coverage", link = metricLink)
    descriptors["critical_violations"] = AttributeDescriptor(description = "Total count of issues of the severity critical", link = metricLink)
    descriptors["directories"] = AttributeDescriptor(description = "Number of directories", link = metricLink)
    descriptors["duplicated_blocks"] = AttributeDescriptor(description = "Number of duplicated blocks of lines", link = metricLink)
    descriptors["duplicated_files"] = AttributeDescriptor(description = "Number of files involved in duplications", link = metricLink)
    descriptors["duplicated_lines"] = AttributeDescriptor(description = "Number of lines involved in duplications", link = metricLink)
    descriptors["duplicated_lines_density"] = AttributeDescriptor(description = "Density of duplicated lines", link = metricLink)
    descriptors["false_positive_issues"] = AttributeDescriptor(description = "Total count of issues marked false positive", link = metricLink)
    descriptors["file_complexity"] = AttributeDescriptor(description = "Cyclomatic complexity based on paths through a file", link = metricLink)
    descriptors["files"] = AttributeDescriptor(description = "Number of files", link = metricLink)
    descriptors["function_complexity"] = AttributeDescriptor(description = "Cyclomatic complexity based on paths through a function", link = metricLink)
    descriptors["functions"] = AttributeDescriptor(description = "Number of functions", link = metricLink)
    descriptors["generated_lines"] = AttributeDescriptor(description = "Number of generated lines of code", link = metricLink)
    descriptors["generated_ncloc"] = AttributeDescriptor(description = "Number of generated non-empty lines of code", link = metricLink)
    descriptors["info_violations"] = AttributeDescriptor(description = "Total count of issues of the severity info", link = metricLink)
    descriptors["line_coverage"] = AttributeDescriptor(description = "Density of fully covered lines of code", link = metricLink)
    descriptors["lines"] = AttributeDescriptor(description = "Number of physical lines (number of carriage returns)", link = metricLink)
    descriptors["lines_to_cover"] = AttributeDescriptor(description = "Number of lines of code which could be covered by unit tests", link = metricLink)
    descriptors["major_violations"] = AttributeDescriptor(description = "Total count of issues of the severity major", link = metricLink)
    descriptors["minor_violations"] = AttributeDescriptor(description = "Total count of issues of the severity minor", link = metricLink)
    descriptors["ncloc"] = AttributeDescriptor(description = "Number of physical lines that contain at least one character which is neither a whitespace nor a tabulation nor part of a comment", link = metricLink)
    descriptors["new_blocker_violations"] = AttributeDescriptor(description = "Number of issues of the severity blocker raised for the first time in the new code period", link = metricLink)
    descriptors["new_branch_coverage"] = AttributeDescriptor(description = "Density of fully covered boolean conditions in flow control structures in new or updated code", link = metricLink)
    descriptors["new_bugs"] = AttributeDescriptor(description = "Number of new bug issues", link = metricLink)
    descriptors["new_code_smells"] = AttributeDescriptor(description = "Total count of code smell issues raised for the first time in the new code period", link = metricLink)
    descriptors["new_conditions_to_cover"] = AttributeDescriptor(description = "Number of new/updated conditions which could be covered by unit tests", link = metricLink)
    descriptors["new_coverage"] = AttributeDescriptor(description = "Mix of branch and line coverage on new/updated code", link = metricLink)
    descriptors["new_critical_violations"] = AttributeDescriptor(description = "Number of issues of the severity critical raised for the first time in the new code period", link = metricLink)
    descriptors["new_development_cost"] = AttributeDescriptor(description = "Development cost of new/updated code", link = metricLink)
    descriptors["new_duplicated_blocks"] = AttributeDescriptor(description = "Number of duplicated blocks of lines in new/updated code", link = metricLink)
    descriptors["new_duplicated_lines"] = AttributeDescriptor(description = "Number of lines involved in duplications in new/updated code", link = metricLink)
    descriptors["new_duplicated_lines_density"] = AttributeDescriptor(description = "Density of duplicated lines in new/updated code", link = metricLink)
    descriptors["new_info_violations"] = AttributeDescriptor(description = "Number of issues of the severity info raised for the first time in the new code period", link = metricLink)
    descriptors["new_line_coverage"] = AttributeDescriptor(description = "Density of fully covered lines of new/updated code", link = metricLink)
    descriptors["new_lines"] = AttributeDescriptor(description = "Number of new/updated lines of code", link = metricLink)
    descriptors["new_lines_to_cover"] = AttributeDescriptor(description = "Number of new/updated lines of code which could be covered by unit tests", link = metricLink)
    descriptors["new_major_violations"] = AttributeDescriptor(description = "Number of issues of the severity major raised for the first time in the new code period", link = metricLink)
    descriptors["new_minor_violations"] = AttributeDescriptor(description = "Number of issues of the severity minor raised for the first time in the new code period", link = metricLink)
    descriptors["new_security_hotspots"] = AttributeDescriptor(description = "Number of new security hotspots in the new code period", link = metricLink)
    descriptors["new_security_hotspots_reviewed"] = AttributeDescriptor(description = "Percentage of reviewed (fixed or safe) security hotspots in new code period", link = metricLink)
    descriptors["new_security_hotspots_reviewed_status"] = AttributeDescriptor(description = "Total number of reviewed security hotspots in new code period", link = metricLink)
    descriptors["new_security_hotspots_to_review_status"] = AttributeDescriptor(description = "Number of security hotspots to review in new code period", link = metricLink)
    descriptors["new_sqale_debt_ratio"] = AttributeDescriptor(description = "Ratio between the cost to develop the software and the cost to fix it in new/updated code", link = metricLink)
    descriptors["new_uncovered_conditions"] = AttributeDescriptor(description = "Total number of uncovered conditions in new/updated code", link = metricLink)
    descriptors["new_uncovered_lines"] = AttributeDescriptor(description = "Total number of uncovered lines in new/updated code", link = metricLink)
    descriptors["new_violations"] = AttributeDescriptor(description = "Number of issues raised for the first time in the new code period", link = metricLink)
    descriptors["new_vulnerabilities"] = AttributeDescriptor(description = "Number of new vulnerability issues", link = metricLink)
    descriptors["open_issues"] = AttributeDescriptor(description = "Total count of issues in the open state", link = metricLink)
    descriptors["projects"] = AttributeDescriptor(description = "Total number of projects", link = metricLink)
    descriptors["public_api"] = AttributeDescriptor(description = "Public api available", link = metricLink)
    descriptors["public_documented_api_density"] = AttributeDescriptor(description = "Documented public api available", link = metricLink)
    descriptors["public_undocumented_api"] = AttributeDescriptor(description = "Undocumented api available", link = metricLink)
    descriptors["reopened_issues"] = AttributeDescriptor(description = "Total count of issues in the reopened state", link = metricLink)
    descriptors["security_hotspots"] = AttributeDescriptor(description = "Number of security hotspots", link = metricLink)
    descriptors["security_hotspots_reviewed"] = AttributeDescriptor(description = "Percentage of reviewed (fixed or safe) security hotspots", link = metricLink)
    descriptors["security_hotspots_reviewed_status"] = AttributeDescriptor(description = "Total number of reviewed security hotspots", link = metricLink)
    descriptors["security_hotspots_to_review_status"] = AttributeDescriptor(description = "Number of security hotspots to review", link = metricLink)
    descriptors["skipped_tests"] = AttributeDescriptor(description = "Number of skipped unit tests", link = metricLink)
    descriptors["sqale_debt_ratio"] = AttributeDescriptor(description = "Ratio between the cost to develop the software and the cost to fix it", link = metricLink)
    descriptors["statements"] = AttributeDescriptor(description = "Number of statements", link = metricLink)
    descriptors["test_errors"] = AttributeDescriptor(description = "Number of unit tests that have failed", link = metricLink)
    descriptors["test_failures"] = AttributeDescriptor(description = "Number of unit tests that have failed with an unexpected exception", link = metricLink)
    descriptors["test_success_density"] = AttributeDescriptor(description = "Ratio between successful tests and all tests", link = metricLink)
    descriptors["tests"] = AttributeDescriptor(description = "Number of unit tests", link = metricLink)
    descriptors["uncovered_conditions"] = AttributeDescriptor(description = "Total number of uncovered conditions", link = metricLink)
    descriptors["uncovered_lines"] = AttributeDescriptor(description = "Total number of uncovered lines", link = metricLink)
    descriptors["violations"] = AttributeDescriptor(description = "Total count of issues in all states", link = metricLink)
    descriptors["vulnerabilities"] = AttributeDescriptor(description = "Number of vulnerability issues", link = metricLink)
    descriptors["wont_fix_issues"] = AttributeDescriptor(description = "Total count of issues in the wont fix state", link = metricLink)

    return descriptors.toMap()
}
