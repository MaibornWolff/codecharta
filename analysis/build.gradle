buildscript {
    ext {
        // Dependency versions
        boon_version = '0.34'
        commons_lang3_version = '3.12.0'
        gson_version = '2.10.1'
        gradle_module_metadata_maven_plugin = '0.3.0'
        jackson_version = '2.15.2'
        jacoco_version = '0.8.11'
        jaxb_api_version = '2.3.1'
        jersey_version = '2.39.1'
        json_schema_version = '1.14.4'
        json_version = '20190722'
        juniversalchardet_version = '1.0.3'
        kotlin_inquirer_version = '0.1.0'
        kotlin_logging_version = '2.1.23'
        kotlin_version = '1.8.21'
        kotlinx_coroutines_version = '1.7.3'
        picocli_version = '4.7.5'
        slf4j_version = '2.0.12'
        sonar_java_version = '6.8.0.23379'
        sonarqube_version = '4.4.1.3373'
        univocity_parsers_version = '2.9.1'

        // Test dependency versions
        assertj_version = '3.24.2'
        junit5_version = '5.9.3'
        junit_platform_version = '1.9.3'
        jsonassert_version = '1.5.1'
        ktlint_version = '10.3.0'

        mockito_core_version = '3.12.4'
        mockito_kotlin_version = '2.2.0'
        mockk_version = '1.13.9'
        wiremock_version = '2.35.1'
    }

    repositories {
        mavenCentral()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
        maven {
            url 'https://jitpack.io'
        }
    }
    dependencies {
        classpath group: 'org.jetbrains.kotlin', name: 'kotlin-gradle-plugin', version: kotlin_version
    }
}

plugins {
    id 'distribution'
    id "org.jlleitschuh.gradle.ktlint" version "${ktlint_version}"
    id 'org.sonarqube' version "${sonarqube_version}"
}

allprojects {
    group 'de.maibornwolff.codecharta'
    version = currentVersion

    repositories.addAll(rootProject.getBuildscript().getRepositories())

    apply plugin: 'jacoco'
    apply plugin: 'maven-publish'
    apply plugin: 'org.jlleitschuh.gradle.ktlint'
    apply plugin: 'org.sonarqube'

    jacoco {
        toolVersion = jacoco_version
    }
}

subprojects {
    apply plugin: 'kotlin'
    apply plugin: 'kotlin-kapt'

    dependencies {
        implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: kotlin_version
        implementation group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: kotlin_version
        implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core', version: kotlinx_coroutines_version
        testImplementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: kotlin_version
        testImplementation("org.junit.jupiter:junit-jupiter-api:$junit5_version")
        testImplementation("org.junit.jupiter:junit-jupiter-engine:$junit5_version")
        testImplementation("org.junit.jupiter:junit-jupiter-params:$junit5_version")

        kapt group: 'info.picocli', name: 'picocli-codegen', version: picocli_version
    }

    test{
        testLogging {
            events "passed", "skipped", "failed"
        }

        finalizedBy jacocoTestReport
    }

    jacocoTestReport {
        dependsOn test
    }

    kotlin {
        jvmToolchain(11)
    }

    kapt {
        arguments {
            arg("project", "${project.group}/${project.name}")
        }
    }

}

distributions {
    main {
        distributionBaseName  = 'codecharta-analysis'
        contents {
            from { '../LICENSE.md' }
            from { 'CHANGELOG.md' }

            // Readmes
            from { 'README.md' }

            project.subprojects.each { p ->
                p.plugins.withType(ApplicationPlugin) {
                    into('bin') {
                        from { p.startScripts.outputs.files }
                        fileMode = 0755
                    }
                    into('lib') {
                        from { p.jar }
                    }
                }
            }

            // deprecated ccsh
            from { 'dist/ccsh' }
        }
    }
}

task integrationTest(type: Exec) {
    standardInput = System.in
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        println "In order to run the integration tests a bash script is executed."
        println "Make sure to use a shell with bash capability (e.g. GitBash) to run this task."
        executable 'cmd'
        workingDir 'test'
        args '/c', "bash -c './golden_test.sh $version'"
    }
    else {
        executable 'sh'
        workingDir('test')
        args '-c', "./golden_test.sh $version"
    }
}

task jacocoTestReport(type: JacocoReport) {

    dependsOn subprojects*.jacocoTestReport

    // Gather execution data from all subprojects
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    // Add all relevant sourcesets from the subprojects
    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        html.enabled false
        csv.enabled false
    }
}

sonar {
  properties {
    property "sonar.coverage.jacoco.xmlReportPaths", "${project.rootDir}/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
  }
}

integrationTest.dependsOn build
project.tasks["sonar"].dependsOn "build", "jacocoTestReport"
