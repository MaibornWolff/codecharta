buildscript {
    ext {
        // Dependency versions
        boon_version = '0.34'
        commons_lang3_version = '3.12.0'
        gson_version = '2.8.9'
        jackson_version = '2.13.0'
        jacoco_version = '0.8.5'
        jaxb_api_version = '2.3.1'
        jersey_version = '3.0.3'
        json_schema_version = '1.14.0'
        json_version = '20210307'
        juniversalchardet_version = '1.0.3'
        kotlin_logging_version = '2.0.11'
        kotlin_version = '1.5.31'
        kotlinx_coroutines_version = '1.5.2'
        picocli_version = '4.6.2'
        slf4j_version = '1.7.32'
        sonar_java_version = '7.4.0.27839'
        sonarqube_version = '3.0'
        univocity_parsers_version = '2.9.1'

        // Test dependency versions
        assertj_version = '3.21.0'
        hamcrest_version = '2.2'
        hamkrest_version = '1.8.0.1'
        junit4_version = '4.13.2'
        junit5_version = '5.8.1'
        junit_platform_version = '1.8.1'
        ktlint_version = '10.2.0'

        mockito_core_version = '4.0.0'
        mockito_kotlin_version = '2.2.0'
        mokk_version = '1.12.0'
        spek2_version = '2.0.17'
        wiremock_version = '2.27.2'
        jsonassert_version = '1.5.0'
    }

    repositories {
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
        maven {
            url 'https://jitpack.io'
        }
    }
    dependencies {
        classpath group: 'org.jetbrains.kotlin', name: 'kotlin-gradle-plugin', version: kotlin_version
    }
}

plugins {
    id 'distribution'
    id "org.jlleitschuh.gradle.ktlint" version "${ktlint_version}"
}

allprojects {
    group 'de.maibornwolff.codecharta'
    version = currentVersion

    repositories.addAll(rootProject.getBuildscript().getRepositories())

    apply plugin: 'jacoco'
    apply plugin: 'maven'
    apply plugin: "org.jlleitschuh.gradle.ktlint"

    jacoco {
        toolVersion = jacoco_version
    }
}

subprojects {
    apply plugin: 'kotlin'
    apply plugin: 'kotlin-kapt'

    dependencies {
        implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: kotlin_version
        implementation group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: kotlin_version
        implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core', version: kotlinx_coroutines_version

        testImplementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: kotlin_version
        testImplementation("org.junit.jupiter:junit-jupiter-api:$junit5_version")
        testRuntime("org.junit.jupiter:junit-jupiter-engine:$junit5_version")
        testImplementation("org.junit.jupiter:junit-jupiter-params:$junit5_version")
        testImplementation "com.natpryce:hamkrest:$hamkrest_version"

        kapt group: 'info.picocli', name: 'picocli-codegen', version: picocli_version
    }

    test{
        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    compileJava {
        options.compilerArgs += ['--release', '8']
    }

    compileTestJava {
        options.compilerArgs += ['--release', '8']
    }

    compileKotlin {
        kotlinOptions.jvmTarget = '1.8'
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = '1.8'
    }
    kapt {
        arguments {
            arg("project", "${project.group}/${project.name}")
        }
    }
}

distributions {
    main {
        baseName = 'codecharta-analysis'
        contents {
            from { '../LICENSE.md' }
            from { '../CHANGELOG.md' }

            // Readmes
            from { 'README.md' }

            project.subprojects.each { p ->
                p.plugins.withType(ApplicationPlugin) {
                    into('bin') {
                        from { p.startScripts.outputs.files }
                        fileMode = 0755
                    }
                    into('lib') {
                        from { p.jar }
                    }
                }
            }

            // deprecated ccsh
            from { 'dist/ccsh' }
        }
    }
}

task integrationTest(type: Exec) {
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        println "In order to run the integration tests a bash script is executed."
        println "Make sure to use a shell with bash capability (e.g. GitBash) to run this task."
    }

    executable 'sh'
    workingDir('test')
    args '-c', "./golden_test.sh $version"
}

task jacocoTestReport(type: JacocoReport) {

    // Gather execution data from all subprojects
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    // Add all relevant sourcesets from the subprojects
    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        html.enabled false
        csv.enabled false
    }
}

// always run the tests before generating the report
jacocoTestReport.dependsOn {
    subprojects*.test
}

integrationTest.dependsOn build
